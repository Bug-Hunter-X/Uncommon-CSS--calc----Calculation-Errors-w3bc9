To avoid these issues:

1. **Use parentheses for clarity:**  Explicitly define the order of operations using parentheses to ensure that calculations are performed as intended.  For example, rewrite the problematic example as:

```css
.element {
  width: calc((50% + 20px) - 10%);
}
```

2. **Avoid mixing units where possible:**  Whenever possible, try to stick to a single unit within your `calc()` expressions to avoid unexpected conversions and rounding errors. 

3. **Test thoroughly:** Test your CSS across different browsers and screen sizes to catch inconsistencies or errors.  Pay close attention to situations that might involve unit conversions or calculations with different units.

4. **Unit conversion for media queries**: Handle unit conversions explicitly in media queries to avoid unexpected rounding errors and maintain consistent layout across different screen sizes. Consider using `vw` (viewport width) or `vh` (viewport height) units instead of percentages or pixels for more reliable responsiveness. Example:

```css
@media (min-width: 768px) {
  .element {
    width: calc(50vw - 20px); /*Using vw for reliable width calculation*/ 
  }
}
```

By following these guidelines, you can use the power of `calc()` while minimizing the risk of encountering these uncommon errors.